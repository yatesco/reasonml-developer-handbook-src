// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List    = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry   = require("bs-platform/lib/js/curry.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");

function Make(C) {
  var collect = function ($staropt$star, $staropt$star$1, _) {
    var l = $staropt$star ? $staropt$star[0] : C[/* l */0];
    var f = $staropt$star$1 ? $staropt$star$1[0] : C[/* f */1];
    var result = Hashtbl.create(/* Some */[/* true */1], List.length(l));
    List.iter((function (item) {
            var r = Curry._1(f, item);
            var match = Hashtbl.mem(result, r);
            var newList = match !== 0 ? Hashtbl.find(result, r) : /* [] */0;
            return Hashtbl.replace(result, r, /* :: */[
                        item,
                        newList
                      ]);
          }), l);
    return result;
  };
  return /* module */[/* collect */collect];
}

var Collector = /* module */[/* Make */Make];

function f(n) {
  var match = +(n % 2 === 0);
  if (match !== 0) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

function collect($staropt$star, $staropt$star$1, _) {
  var l = $staropt$star ? $staropt$star[0] : /* :: */[
      1,
      /* :: */[
        2,
        /* :: */[
          3,
          /* :: */[
            4,
            /* :: */[
              5,
              /* :: */[
                6,
                /* :: */[
                  7,
                  /* :: */[
                    8,
                    /* :: */[
                      9,
                      /* :: */[
                        10,
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ];
  var f$1 = $staropt$star$1 ? $staropt$star$1[0] : f;
  var result = Hashtbl.create(/* Some */[/* true */1], List.length(l));
  List.iter((function (item) {
          var r = Curry._1(f$1, item);
          var match = Hashtbl.mem(result, r);
          var newList = match !== 0 ? Hashtbl.find(result, r) : /* [] */0;
          return Hashtbl.replace(result, r, /* :: */[
                      item,
                      newList
                    ]);
        }), l);
  return result;
}

var EvenNumbersCollectorSpec = /* module */[/* collect */collect];

var m = collect(/* None */0, /* None */0, /* () */0);

console.log(Hashtbl.mem(m, /* true */1));

console.log(Hashtbl.mem(m, /* false */0));

var trues = Hashtbl.find(m, /* true */1);

var falses = Hashtbl.find(m, /* false */0);

console.log("trues are:", $$Array.of_list(trues));

console.log("falses are:", $$Array.of_list(falses));

var animals = /* :: */[
  /* record */[
    /* type_ : Dog */0,
    /* name */"Wuffles"
  ],
  /* :: */[
    /* record */[
      /* type_ : Dog */0,
      /* name */"Biscuits"
    ],
    /* :: */[
      /* record */[
        /* type_ : Cat */1,
        /* name */"KillerCat"
      ],
      /* [] */0
    ]
  ]
];

function f$1(n) {
  return n[/* type_ */0];
}

function collect$1($staropt$star, $staropt$star$1, _) {
  var l = $staropt$star ? $staropt$star[0] : animals;
  var f$2 = $staropt$star$1 ? $staropt$star$1[0] : f$1;
  var result = Hashtbl.create(/* Some */[/* true */1], List.length(l));
  List.iter((function (item) {
          var r = Curry._1(f$2, item);
          var match = Hashtbl.mem(result, r);
          var newList = match !== 0 ? Hashtbl.find(result, r) : /* [] */0;
          return Hashtbl.replace(result, r, /* :: */[
                      item,
                      newList
                    ]);
        }), l);
  return result;
}

var AnimalCollector = /* module */[/* collect */collect$1];

var m$1 = collect$1(/* None */0, /* None */0, /* () */0);

console.log($$Array.of_list(Hashtbl.find(m$1, /* Dog */0)));

console.log($$Array.of_list(Hashtbl.find(m$1, /* Cat */1)));

console.log(Hashtbl.mem(m$1, /* Horse */2));

exports.Collector                = Collector;
exports.EvenNumbersCollectorSpec = EvenNumbersCollectorSpec;
exports.trues                    = trues;
exports.falses                   = falses;
exports.animals                  = animals;
exports.AnimalCollector          = AnimalCollector;
exports.m                        = m$1;
/* m Not a pure module */
